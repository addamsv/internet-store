# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.
version: '3'

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.
services:
  # сервис 'main'
  main:
    container_name: main

    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # которая содержит соответствующий Dockerfile.

    # на пример: build: client/
    # Здесь 'client/ соответствует пути к папке, которая содержит
    # файл Dockerfile для клиентской части системы.
    build:
      context: .

    env_file:
      - .development.env

    volumes:
      - .:/app
      - /app/node_modules

    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 5500 и организовать его связь с портом
    # 5500 контейнера (так как именно на этот порт сервер
    # ожидает поступления запросов).
    ports:
      - 5500:5500

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "npm run start:dev".
    command: npm run start:dev

    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Нам нужно, чтобы сервис 'main' дождался бы готовности к работе сервиса 'postgres'.
    depends_on:
      - postgres

    restart: always

  # сервис 'postgres'.
  postgres:
    container_name: postgres

    image: postgres:15

    env_file:
      - .development.env

    environment:
      PGDATA: /var/lib/postgresql/data

    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./postgres-data:/var/lib/postgresql/data
      # - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

    # Ключевое слово 'network_mode' используется для описания типа сети.
    # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.
    # network_mode: host

    ports:
      - 5432:5432

    restart: always

volumes:
  pgdata:
# сборка проекта:
# $ docker-compose build

# 6. Запуск проекта
# соответствует шагу, на котором, при работе с отдельными контейнерами, выполняется команда docker run:
# $ docker-compose up

# 7. полезные команды:
# команда позволяет останавливать и удалять контейнеры и другие ресурсы, созданные командой docker-compose up:
# $ docker-compose down
# Эта команда выводит журналы сервисов:
# $ docker-compose logs -f [service name]
# С помощью такой команды можно вывести список контейнеров:
# $ docker-compose ps
# Данная команда позволяет выполнить команду в выполняющемся контейнере:
# $ docker-compose exec [service name] [command]
# Например, она может выглядеть так: docker-compose exec main ls
# Такая команда позволяет вывести список образов:
# $ docker-compose images
